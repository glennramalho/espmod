#!/bin/bash
################################################################################
# buildtest (c) Copyright 2019 Glenn Ramalho - RFIDo Design
################################################################################
# Description:
#   This script is used to setup a basic directory structure to simulate an
#   ESP32 program.
################################################################################
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

PROGNAME=${0##*/}
BINDIR=$(dirname $0)
ESPMODPATH=${BINDIR%/bin}
USAGE=\
"usage:
$PROGNAME [-hV]
$PROGNAME [-A] [-T files] [-E esppath] dirname\n"
VERSION='$Id$'
HELP=\
"\nThis program builds a directory structure for a Arduino-IDE or ESP-32 IDE
test using the espmod model.
-h      help
-V      version
-A      Arduino IDE. Default is esp-IDE.
-E      ESPMOD path, default=$ESPMODPATH
-T      c/c++ files to list in the Makefile For esp-32 at least one is needed.
        The h files should not be listed. For Arduino-IDE, the main INO file
        is already added.
dirname directory name\n\n"

while getopts "hVAT:E:" opt
do
   case $opt in
      h) printf "$USAGE"
         printf "$HELP"
         exit 0
         ;;
      V) printf "$VERSION\n"
         exit 0
         ;;
      E) ESPMODPATH=$OPTARG
         ;;
      A) ARDUINOIDE=1
         ;;
      T) FILES="$FILES $OPTARG"
         ;;
      ?) printf "$USAGE" 1>&2
         exit 1
         ;;
   esac
done
shift $((OPTIND - 1))

# First we look for the directory name to build. At least one must be given.
if [[ $# != 1 ]]
then
   echo "One directory name is required." 1>&2
   printf "$USAGE" 1>&2
   exit 1
fi
DIRNAME=$1

# Now we do some basic checking. First we make sure we can find the templates.
TEMPLATE=$ESPMODPATH/templates
if [[ ! -d $TEMPLATE ]]
then
   echo "$PROGNAME: Could not find templates in $TEMPLATE" 1>&2
   exit 3
fi

# Now we check if there is already a directory present. We cannot override an
# existing directory
if [[ -d $DIRNAME ]]
then
   echo "$PROGNAME: There is already a directory with the name $DIRNAME" 1>&2
   exit 4
fi

# We need to setup a list of files to include in the makefile.
for SRC in $FILES
do
   SRCS="$SRCS ../\$(SRCDIR)/$SRC"
done

# It seems to be ok, so we start building the directory structure.
for dir in $DIRNAME $DIRNAME/$DIRNAME $DIRNAME/test
do
   echo "%%% Creating directory $dir"
   mkdir $dir
   # If we can't create a directory we quit as we do not want to generate
   # files unless the area for them is ok.
   if (($? != 0))
   then
      printf "Could not create directory $dir" 1>&2
      exit 2
   fi
done

# We setup the source files to use. Now we copy over the Makefile. For Arduino
# we also create a ino file as the Arduino-IDE requires the main file to have
# the same name as the directory.
if [[ -n $ARDUINOIDE ]]
then
   MAKESRC=Makefile_aide
   TESTFILES="sc_main.cpp temptest.cpp temptest.h"
   IFAIDELINE="s#<IFAIDE>##"
   IFESPLINE="s#<IFESPIDF>.*##"
   cat <<EOF >$DIRNAME/$DIRNAME/$DIRNAME.ino
void setup() {
}

void loop() {
}
EOF
else
   MAKESRC=Makefile_esp
   TESTFILES="sc_main.cpp temptest.cpp temptest.h main.cpp main.h"
   IFAIDELINE="s#<IFAIDE>.*##"
   IFESPLINE="s#<IFESPIDF>##"
fi

# We build the SED command
SEDCMD="
s#<DIRNAME>#$DIRNAME#g
s#<SRCS>#$SRCS#g
s#<ESPPATH>#$ESPMODPATH#g
$IFAIDELINE
$IFESPLINE"

# Now we start building the Makefile
echo "Coping <TEMPLATE>/$MAKESRC to $DIRNAME/test/Makefile"
sed "$SEDCMD" $TEMPLATE/$MAKESRC > $DIRNAME/test/Makefile

# Then we copy the remaining files.
for FILE in $TESTFILES
do
   TOFILE=${FILE#temp}
   if [[ $TOFILE != $FILE ]]
   then
      TOFILE=${DIRNAME}$TOFILE
   fi
   echo "Coping <TEMPLATE>/$FILE to $DIRNAME/test/$TOFILE"
   sed "$SEDCMD" $TEMPLATE/$FILE > $DIRNAME/test/$TOFILE
done

cat <<EOF
Copying is done. Please check the results and copyin or write the source files.
If other c/c++ files are used, add them to the Makefile in the SRC list.
EOF

exit 0
